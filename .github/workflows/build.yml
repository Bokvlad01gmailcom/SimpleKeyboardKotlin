name: Build Kotlin Simple Keyboard

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        
    - name: Accept Android SDK licenses and install components
      run: |
        echo "=== Installing Android SDK Components ==="
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-34" "build-tools;34.0.0" "platform-tools" "cmake;3.22.1" || true
        echo "=== Verifying installations ==="
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list_installed
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-
          
    - name: Clean Gradle
      run: |
        rm -rf ~/.gradle/caches
        rm -rf .gradle
        
    - name: Validate project structure
      run: |
        echo "=== Project Structure Validation ==="
        echo "Checking required files:"
        ls -la build.gradle.kts && echo "‚úÖ Root build.gradle.kts found" || echo "‚ùå Root build.gradle.kts missing"
        ls -la app/build.gradle.kts && echo "‚úÖ App build.gradle.kts found" || echo "‚ùå App build.gradle.kts missing"
        ls -la settings.gradle.kts && echo "‚úÖ Settings found" || echo "‚ùå Settings missing"
        ls -la gradlew && echo "‚úÖ Gradle wrapper found" || echo "‚ùå Gradle wrapper missing"
        echo "Kotlin source files:"
        find app/src -name "*.kt" | head -10
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Check Gradle wrapper
      run: |
        echo "=== Environment Check ==="
        echo "Gradle wrapper version:"
        ./gradlew --version
        echo "Java version:"
        java -version
        echo "Android SDK location:"
        echo $ANDROID_SDK_ROOT
        echo "Available Android platforms:"
        ls -la $ANDROID_SDK_ROOT/platforms/ || echo "No platforms found"
        echo "Available build-tools:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "No build-tools found"
        echo "Gradle properties:"
        cat gradle.properties
        
    - name: Build debug APK
      run: |
        echo "=== Starting Build Process ==="
        
        # Attempt 1: Standard build with 4GB memory
        echo "üöÄ Attempt 1: Standard build (4GB memory)"
        export GRADLE_OPTS="-Xmx4g -Dfile.encoding=UTF-8 -Dorg.gradle.jvmargs=-Xmx4g"
        if ./gradlew clean assembleDebug --stacktrace --info --no-daemon; then
          echo "‚úÖ Build successful on first attempt!"
        else
          echo "‚ùå First attempt failed, trying reduced memory..."
          
          # Attempt 2: Reduced memory
          echo "üöÄ Attempt 2: Reduced memory (2GB)"
          export GRADLE_OPTS="-Xmx2g -Dfile.encoding=UTF-8 -Dorg.gradle.jvmargs=-Xmx2g"
          if ./gradlew clean assembleDebug --stacktrace --no-daemon; then
            echo "‚úÖ Build successful on second attempt!"
          else
            echo "‚ùå Second attempt failed, trying minimal build..."
            
            # Attempt 3: Minimal build
            echo "üöÄ Attempt 3: Minimal build (1GB, no parallel)"
            export GRADLE_OPTS="-Xmx1g -Dfile.encoding=UTF-8"
            ./gradlew clean assembleDebug --stacktrace --no-daemon --no-parallel --max-workers=1
          fi
        fi
        
    - name: List APK files
      run: find . -name "*.apk" -type f
      
    - name: Check APK exists
      run: |
        echo "=== APK Validation ==="
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "‚úÖ APK created successfully!"
          APK_SIZE=$(stat -c%s app/build/outputs/apk/debug/app-debug.apk)
          APK_SIZE_KB=$((APK_SIZE / 1024))
          echo "üì¶ APK Size: ${APK_SIZE_KB}KB (${APK_SIZE} bytes)"
          ls -lh app/build/outputs/apk/debug/app-debug.apk
          
          # Validate APK structure
          echo "=== APK Structure Check ==="
          file app/build/outputs/apk/debug/app-debug.apk
          
          if [ $APK_SIZE -gt 100000 ]; then
            echo "‚úÖ APK size looks reasonable (>100KB)"
          else
            echo "‚ö†Ô∏è APK seems too small, might be corrupted"
          fi
        else
          echo "‚ùå APK not found! Searching for any APK files..."
          find . -name "*.apk" -type f
          echo "=== Build output directory structure ==="
          find app/build -type f | head -20
          exit 1
        fi
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: simple-keyboard-kotlin-apk-${{ github.sha }}
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        
    - name: Get APK size
      run: |
        APK_SIZE=$(stat -c%s app/build/outputs/apk/debug/app-debug.apk)
        APK_SIZE_MB=$((APK_SIZE / 1024 / 1024))
        echo "APK Size: ${APK_SIZE_MB}MB (${APK_SIZE} bytes)"
        echo "APK_SIZE=${APK_SIZE}" >> $GITHUB_ENV
        echo "APK_SIZE_MB=${APK_SIZE_MB}" >> $GITHUB_ENV
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: app/build/outputs/apk/debug/app-debug.apk
        name: Simple Keyboard Kotlin ${{ github.ref_name }}
        body: |
          ## üì± Simple Keyboard Kotlin APK
          
          –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ Kotlin —Å Jetpack Compose.
          
          ### üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
          - üì¶ –†–∞–∑–º–µ—Ä APK: ${{ env.APK_SIZE_MB }}MB
          - ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 100% –Ω–∞—Ç–∏–≤–Ω–∞—è
          - üé® UI: Jetpack Compose
          - üîß –Ø–∑—ã–∫: Kotlin
          
          ### üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞:
          1. –°–∫–∞—á–∞–π—Ç–µ `app-debug.apk`
          2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
          3. –í–∫–ª—é—á–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–∏—Å—Ç–µ–º—ã
          4. –ü–æ–∫–∞–∂–∏—Ç–µ –ø–ª–∞–≤–∞—é—â—É—é –∫–Ω–æ–ø–∫—É
          
          ### ‚ú® –§—É–Ω–∫—Ü–∏–∏:
          - ‚å®Ô∏è InputMethodService
          - üîò –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ Enter —Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º
          - üêõ Debug —Å–µ—Ä–≤–µ—Ä —Å –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
          - üé® Material Design 3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}